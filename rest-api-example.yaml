swagger: '2.0'
info:
  description: |
    This is the NS reference API. It uses a fictitious domain model for selling tickets. While a lot of effort has been made to create a realistic set of method, the purpose of this OpenAPI definition is to demonstrate the API-standards (naming-conventions etc.) of the NS. It is NOT a real API and NOT our real domain model.

    Note the existence of a Travelplan-entity. It is a fictitious entity that slightly resembles the Itinerary-entity that is used in the real NS domain models. To avoid confusion it was named differently.


    ## Domain model [link](https://imgur.com/55qxMz6)

    ![(fictitious) domain model](https://imgur.com/55qxMz6.png)

    ## REST Cheat Sheet [see also](https://hersengarage.nl/rest-api-design-as-a-craft-not-an-art-a3fd97ed3ef4)

    This cheatsheet can also be found on [Github](https://github.com/patricksavalle/rest-api-cheatsheet)

    - Build the API with consumers (developers) in mind--as a product in its own right.

      * Not for a specific front-end.
      * Use a domain model.
      * Use use-cases and scenarios to validate your APIs UX.

    - A good API (or any other interface) is

      * Consistent (avoid surprises) 
      * Cohesive (only lists purposeful endpoints)
      * Complete (has all necessary endpoints for its purpose, but no more)
      * Minimal (only one way to do things)
      * Encapsulating (hiding implementation details)
      * Self explaining
      * Documented

    - Base resources and URLs on the entities and relationships of your domain model.

      * Use plural forms for resources (```orders``` instead of ```order```), it's the datamodelling standard.
      
    - Create a Swagger or OpenAPI file for your API
      
      * Use lowercase in constant parts of paths, e.g: ```/lowercase```, not ```/CamelCase``` or ```/UPPERCASE```.
      * Use camelCase field names, e.g.: ```fieldName```, not ```FieldName``` or ```field_name```
      * Use CamelCase object names, e.g.: ```TicketObject```, not ```ticketObject``` or ```ticket_object```

    - Use the Collection Metaphor.

        * Two URLs per public resource in the domain model:

          * The resource collection (e.g. ```/orders```)
          * Individual resource within the collection (e.g. ```/orders/{orderId}```).
        
                e.g.
            
                POST /orders
                GET /orders
                GET /orders/{orderId}
                PUT /orders/{orderId}
                PATCH /orders/{orderId}
                DELETE /orders/{orderId}

    - Reflect the hierarchy of the domain model in the URLs

      * Parts are always in the path to their wholes (the composition or 1..n relationship).
      * Alternate resource names with IDs as URL parts.

            e.g.
          
            GET /wholes/{wholeId}
            GET /wholes/{wholeId}/parts/{partId}
            GET /wholes/{wholeId}/parts/{partId}/subparts/{subpartId}


    - Evolution over versioning.

      * Versioning via the URL signifies a 'platform' version and the entire platform must be versioned at the same time to enable the linking strategy.

            e.g.
        
            https://api.example.com/1/orders
            
      * Versioning via the Accept header is versioning the resource.
      
            e.g.
        
            GET /jobs HTTP/1.1
            Host: api.example.com
            Accept: application/vnd.example.api+json;version=2
            
      * Additions to a response do not require versioning. However, additions to a request body that are 'required' are troublesome--and may require versioning (breaking changes).
      * Hypermedia linking (HATEOAS) and versioning is troublesome no matter what--minimize it.

    - Use the HTTP verbs to mean this:

        * POST - create and other non-idempotent operations.
        * PUT - replace.
        * PATCH - (partial) update.
        * GET - read a resource or collection.
        * DELETE - remove a resource or collection.

    - Ensure that your GET, PUT, PATCH and DELETE operations are all [idempotent](http://www.restapitutorial.com/lessons/idempotency.html).

    - Use [HTTP status codes](https://httpstatuses.com/) to be meaningful.
      * 200 - Success.
      * 201 - Created. Returned on successful creation of a new resource. Include a 'Location' header with a link to the newly-created resource.
      * 203 - Accepted.
      * 204 - No content (for empty responses)
      * 400 - Bad request. Data issues such as invalid JSON, etc.
      * 404 - Not found. Resource not found on GET.
      * 409 - Conflict. Duplicate data or invalid data state would occur.

    - Make resource representations meaningful.

      * No plain IDs embedded in responses. Use links and reference objects.
      * Design resource representations not database entities (use a (logical) domain model not a (technical) data model).
      * Merge representations. Donâ€™t expose internal / coupling tables as two IDs.

    - Support sorting and pagination on collections (```?offset=100&limit=50&order=id```).

    - Support link expansion of relationships. Allow clients to expand the data contained in the response by including additional representations instead of, or in addition to, links.

    - Allow clients to select the fields that come back in the response (with query-arguments, ```?fields=name&fields=address&fields=city```)

    - Use ISO 8601 for dates. 

          E.g. 
      
          1997-07-16T19:20:30+01:00   # time-offset
          1997-07-16T19:20:30Z        # Zulu-time
          1997-07-16T19:20:30EST      # time-zone
          1997-07-16T19:20:30         # local datetime

    - Use ISO 4217 for currency codes.

    - Use ISO 3166 for country codes.

    - Use [OAuth2](http://oauth.net/2/) to secure your API.
      * Use an auto-expiring bearerAuth token for authentication (```Authorisation: bearerAuth f0ca4227-64c4-44e1-89e6-b27c62ac2eb6```).
      * Require HTTPS.

    - Enforce use of the Content-Type and Accept-Type headers even if you use JSON as default for both requests and responses.

          e.g.
          
          Content-Type: application/json
          Accept-Type: application/json

    - Enforce the use the Accept-Language header for locale setting (```Accept-Language: nl, en-gb;q=0.8, en;q=0.7```

    - Consider Cache-ability. At a minimum, use the following response headers:
        * ETag - An arbitrary string for the version of a representation. Make sure to include the media type in the hash value, because that makes a different representation. (```ETag: "686897696a7c876b7e"```)
        * Date - Date and time the response was returned (in RFC1123 format). (```Date: Sun, 06 Nov 1994 08:49:37 GMT```)
        * Cache-Control - The maximum number of seconds (max age) a response can be cached. However, if caching is not supported for the response, then no-cache is the value. (```Cache-Control: 360``` or ```Cache-Control: no-cache```)
        * Expires - If max age is given, contains the timestamp (in RFC1123 format) for when the response expires, which is the value of Date (e.g. now) plus max age. If caching is not supported for the response, this header is not present. (```Expires: Sun, 06 Nov 1994 08:49:37 GMT```)
        * Pragma - When Cache-Control is 'no-cache' this header is also set to 'no-cache'. Otherwise, it is not present. (```Pragma: no-cache```)
        * Last-Modified - The timestamp that the resource itself was modified last (in RFC1123 format). (```Last-Modified: Sun, 06 Nov 1994 08:49:37 GMT```)
  version: 0.1.0
  title: NS Reference API
  termsOfService: 'http://api.ns.nl/terms/'
  contact:
    email: apiteam@ns.nl
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.ns.nl
basePath: /referenceapi/v1/
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  bearerAuth:
    description: |
      Token that can be acquired throught the POST /sessions method
    type: apiKey
    name: Authorization
    in: header
  basicAuth:
    type: basic
    description: |
      Standard HTTP username/password authentication
paths:
  /sessions:
    post:
      tags:
        - sessions
      summary: Create a new session token.
      description: 'Functionally the same as logging in. The session token expires after 30m. of inactivity. Note that the server does not store client state, it is merely the creation of an access token.'
      security:
        - basicAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
      responses:
        '201':
          description: Created
          schema:
            type: string
            example: 123e4567-e89b-12d3-a456-426655440000
            description: sessiontoken
        '401':
          description: Unauthorized
    delete:
      tags:
        - sessions
      summary: Delete an existing session token.
      description: Functionally the same as logging out.
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
      responses:
        '200':
          description: Ok
  /orders:
    post:
      tags:
        - orders
      summary: Create a new order.
      description: 'An order is a collection of travelplans, payments and tickets. This operation creates an empty order.'
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateOrderRequest'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/OrderObject'
        '401':
          description: Unauthorized
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
    get:
      tags:
        - orders
      summary: Retrieve a list of orders.
      description: 'An order is a collection of travelplans, payments and tickets. This method retrieves a paginated list of orders that where created with the given API-key.'
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/OrderArray'
        '401':
          description: Unauthorized
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
  '/orders/{orderId}':
    put:
      tags:
        - orders
      summary: Replace an existing order.
      description: 'An order is a collection of travelplans, payments and tickets.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateOrderRequest'
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order to be replaced
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
    patch:
      tags:
        - orders
      summary: Update a single field of an existing order.
      description: 'An order is a collection of travelplans, payments and tickets.'
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: Id of the order to be updated
        - in: query
          name: fieldname
          required: true
          type: array
          items:
            type: string
          description: Names of fields that are to be updated
        - in: query
          name: fieldvalue
          required: true
          type: array
          items:
            type: string
          description: 'New values for the listed fields, for each field a value'
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
    get:
      tags:
        - orders
      summary: 'Retrieve a single order and all it''s contained travelplans, travelers and tickets.'
      description: empty
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order to be retrieved
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/OrderObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
    delete:
      tags:
        - orders
      summary: 'Retrieve a single order and all it''s contained travelplans, travelers and tickets.'
      description: empty
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order to be retrieved
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/OrderObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
  '/routes/{origin}/{destination}/{departureDatetime}':
    get:
      tags:
        - routes
      summary: List all routes
      description: List routes that can be offered
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: origin
          type: string
          description: Origins for which to return the travelplans
          required: true
        - in: path
          name: destination
          type: string
          description: Destinations for which to return the travelplans
          required: true
        - in: path
          name: departureDatetime
          type: string
          description: The departure date for which to return travelplans
          required: true
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/RouteObject'
        '401':
          description: Unauthorized
  /travelplans:
    get:
      tags:
        - travelplans
      summary: List all travelplans
      description: 'List travelplans, can be used for analyses, dashboards or mailings'
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return
        - in: query
          name: origins
          type: array
          items:
            type: string
          description: list of origins to return
        - in: query
          name: destinations
          type: array
          items:
            type: string
          description: list of destinations to return
        - in: query
          name: departuredates
          type: string
          description: The departure date for which to return travelplans
        - in: query
          name: userids
          type: string
          description: The userids for which the to return the travelplans
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/TravelplanArray'
        '401':
          description: Unauthorized
  '/orders/{orderId}/travelplans':
    post:
      tags:
        - travelplans
      summary: Create a new travelplan and attach it to the specified order.
      description: Create a new travelplan based on the given route and attach to given order
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order in which a travelplan is to be created
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateTravelplanRequest'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/TravelplanObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '405':
          description: Invalid input
    get:
      tags:
        - travelplans
      summary: Retrieve a list of travelplan for a specific order.
      description: 'An order is a collection of travelplans, payments and tickets. This method retrieves a paginated list of orders that where created with the given API-key.'
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order in which a travelplan is to be created
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/TravelplanArray'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
  '/orders/{orderId}/travelplans/{travelplanId}':
    put:
      tags:
        - travelplans
      summary: Replace an existing travelplan.
      security:
        - bearerAuth: []
      description: 'An order is a collection of travelplans, payments and tickets.'
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTravelplanRequest'
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: travelplanId
          required: true
          type: string
          description: id of the travelplan that is to be replaced
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
    delete:
      tags:
        - travelplans
      summary: 'Retrieve a single order and all it''s contained travelplans, travelers and tickets.'
      description: empty
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: travelplanId
          required: true
          type: string
          description: id of the travelplan that is to be replaced
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/OrderObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
  '/orders/{orderId}/tickets':
    post:
      tags:
        - tickets
      summary: Create a new ticket and attach it to the specified order.
      description: 'An order is a collection of travelplans, payments and tickets. This operation creates an empty order.'
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order in which a ticket is to be created
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateTicketRequest'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/TicketObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
    get:
      tags:
        - tickets
      summary: Retrieve a list of tickets for a specific order.
      description: 'An order is a collection of travelplans, payments and tickets. This method retrieves a paginated list of orders that where created with the given API-key.'
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which the tickets are to be listed
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/TicketArray'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
  '/orders/{orderId}/tickets/{ticketId}':
    put:
      tags:
        - tickets
      summary: Replace an existing tickets.
      description: 'An order is a collection of travelplans, payments and tickets.'
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTicketRequest'
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: ticketId
          required: true
          type: string
          description: id of the ticket that is to be replaced
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ErrorObject'
    get:
      tags:
        - tickets
      summary: 'Retrieve a single ticket and all it''s contained travelplans, travelers and tickets.'
      description: empty
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: ticketId
          required: true
          type: string
          description: id of the ticket that is to be replaced
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/OrderObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
    delete:
      tags:
        - tickets
      summary: Retrieve a single ticket
      description: empty
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: ticketId
          required: true
          type: string
          description: id of the ticket that is to be replaced
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/OrderObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
  '/orders/{orderId}/travelplans/{travelplanId}/travelers':
    post:
      tags:
        - travelers
      summary: Create a traveler
      description: Add a traveler to a travelplan
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: travelplanId
          required: true
          type: string
          description: id of the ticket that is to be replaced
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateTravelerRequest'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/TravelerObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
    get:
      tags:
        - travelers
      summary: List travelers
      description: List all traveler attached to the specified travelplans
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: travelplanId
          required: true
          type: string
          description: id of the ticket that is to be replaced
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/TravelerArray'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
  '/orders/{orderId}/travelplans/{travelplanId}/travelers/{travelerId}':
    delete:
      tags:
        - travelers
      summary: Delete a traveler
      security:
        - bearerAuth: []
      description: Delete a traveler attached to a ticket
      parameters:
        - in: header
          name: X-APIKEY
          required: true
          type: string
          description: 'the ApiKey as obtained through the API developer portal, it identifies the calling app'
        - name: Accept-Type
          in: header
          required: true
          type: string
          description: Must be 'application/json'
        - in: path
          name: orderId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: travelplanId
          required: true
          type: string
          description: id of the order for which a travelplan is to be replaced
        - in: path
          name: travelerId
          required: true
          type: string
          description: id of the ticket that is to be replaced
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/TravelerObject'
        '401':
          description: Unauthorized
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorObject'
definitions:
  OrderObject:
    type: object
    properties:
      id:
        type: integer
        example: 3
      createDatetime:
        type: string
        format: datetime
        example: '2018-12-23T10:45Z'
      status:
        type: string
        example: offered
        enum:
          - offered
          - ordered
          - approved
          - delivered
      travelPlans:
        items:
          $ref: '#/definitions/TravelplanArray'
      tickets:
        items:
          $ref: '#/definitions/TicketArray'
      travelers:
        items:
          $ref: '#/definitions/TravelerArray'
  OrderArray:
    type: array
    items:
      $ref: '#/definitions/OrderObject'
  CreateOrderRequest:
    $ref: '#/definitions/OrderObject'
  TravelerObject:
    type: object
    properties:
      id:
        type: string
        example: dd948a6f-9f27-4d62-a8ba-c6935f73567d
      firstName:
        type: string
        example: Patrick
      lastName:
        type: string
        example: Savalle
      birthDate:
        type: string
        format: date
        example: '1967-08-16T00:00:00.000Z'
      email:
        type: string
        format: email
        example: patrick@patrick_savalle.com
  TravelerArray:
    type: array
    items:
      $ref: '#/definitions/TravelerObject'
  CreateTravelplanRequest:
    type: object
    properties:
      routeId:
        type: string
        description: Id of route to use for travelplan
        example: dd948a6f-9f27-4d62-a8ba-c6935f73567d
  TravelplanObject:
    type: object
    properties:
      id:
        type: string
        example: dd948a6f-9f27-4d62-a8ba-c6935f73567d
      routeId:
        type: string
        example: dd948a6f-9f27-4d62-a8ba-c6935f73567d
      travelers:
        type: array
        items:
          $ref: '#/definitions/TravelerArray'
  TravelplanArray:
    type: array
    items:
      $ref: '#/definitions/TravelplanObject'
  CreateTravelerRequest:
    type: object
    properties:
      userId:
        type: string
        example: dd948a6f-9f27-4d62-a8ba-c6935f73567d
  CreateTicketRequest:
    type: object
    properties:
      travelPlan:
        type: string
        example: dd948a6f-9f27-4d62-a8ba-c6935f73567d
  TicketObject:
    type: object
    properties:
      status:
        type: string
        example: delivered
        enum:
          - placed
          - approved
          - delivered
      url:
        type: string
        example: 'https://ticketrepo.ns.nl/dd948a6f-9f27-4d62-a8ba-c6935f73567d'
      amount:
        type: string
        example: 122.5
      currency:
        type: string
        format: iso-currency
        example: EUR
  TicketArray:
    type: array
    items:
      $ref: '#/definitions/TicketObject'
  StopObject:
    type: object
    properties:
      station:
        type: string
        example: NLAMS
      departureDatetime:
        type: string
        example: '2018-12-22T10:10Z'
      lattitude:
        type: string
        example: 12.46573
      longitude:
        type: string
        example: -3.56887
  RouteObject:
    type: object
    properties:
      id:
        type: string
        example: dd948a6f-9f27-4d62-a8ba-c6935f73567d
      stops:
        type: array
        items:
          $ref: '#/definitions/StopObject'
  ErrorObject:
    type: object
    properties:
      errorCode:
        type: string
        example: HUMAN_READABLE_FAULT_CODE
      message:
        type: string
        example: An optional detailed description meant for client application developers
